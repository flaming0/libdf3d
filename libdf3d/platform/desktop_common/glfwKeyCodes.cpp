#include "glfwKeyCodes.h"

#include <GLFW/glfw3.h>

namespace df3d { namespace platform {

base::KeyboardEvent::KeyCode convertGlfwKeyCode(int keycode)
{
    switch (keycode)
    {
    case GLFW_KEY_SPACE:
        return base::KeyboardEvent::KEY_SPACE;
    case GLFW_KEY_MINUS:
        return base::KeyboardEvent::KEY_MINUS;
    case GLFW_KEY_SLASH:
        return base::KeyboardEvent::KEY_SLASH;
    case GLFW_KEY_EQUAL:
        return base::KeyboardEvent::KEY_EQUAL;
    case GLFW_KEY_0:
        return base::KeyboardEvent::KEY_0;
    case GLFW_KEY_1:
        return base::KeyboardEvent::KEY_1;
    case GLFW_KEY_2:
        return base::KeyboardEvent::KEY_2;
    case GLFW_KEY_3:
        return base::KeyboardEvent::KEY_3;
    case GLFW_KEY_4:
        return base::KeyboardEvent::KEY_4;
    case GLFW_KEY_5:
        return base::KeyboardEvent::KEY_5;
    case GLFW_KEY_6:
        return base::KeyboardEvent::KEY_6;
    case GLFW_KEY_7:
        return base::KeyboardEvent::KEY_7;
    case GLFW_KEY_8:
        return base::KeyboardEvent::KEY_8;
    case GLFW_KEY_9:
        return base::KeyboardEvent::KEY_9;
    case GLFW_KEY_A:
        return base::KeyboardEvent::KEY_A;
    case GLFW_KEY_B:
        return base::KeyboardEvent::KEY_B;
    case GLFW_KEY_C:
        return base::KeyboardEvent::KEY_C;
    case GLFW_KEY_D:
        return base::KeyboardEvent::KEY_D;
    case GLFW_KEY_E:
        return base::KeyboardEvent::KEY_E;
    case GLFW_KEY_F:
        return base::KeyboardEvent::KEY_F;
    case GLFW_KEY_G:
        return base::KeyboardEvent::KEY_G;
    case GLFW_KEY_H:
        return base::KeyboardEvent::KEY_H;
    case GLFW_KEY_I:
        return base::KeyboardEvent::KEY_I;
    case GLFW_KEY_J:
        return base::KeyboardEvent::KEY_J;
    case GLFW_KEY_K:
        return base::KeyboardEvent::KEY_K;
    case GLFW_KEY_L:
        return base::KeyboardEvent::KEY_L;
    case GLFW_KEY_M:
        return base::KeyboardEvent::KEY_M;
    case GLFW_KEY_N:
        return base::KeyboardEvent::KEY_N;
    case GLFW_KEY_O:
        return base::KeyboardEvent::KEY_O;
    case GLFW_KEY_P:
        return base::KeyboardEvent::KEY_P;
    case GLFW_KEY_Q:
        return base::KeyboardEvent::KEY_Q;
    case GLFW_KEY_R:
        return base::KeyboardEvent::KEY_R;
    case GLFW_KEY_S:
        return base::KeyboardEvent::KEY_S;
    case GLFW_KEY_T:
        return base::KeyboardEvent::KEY_T;
    case GLFW_KEY_U:
        return base::KeyboardEvent::KEY_U;
    case GLFW_KEY_V:
        return base::KeyboardEvent::KEY_V;
    case GLFW_KEY_W:
        return base::KeyboardEvent::KEY_W;
    case GLFW_KEY_X:
        return base::KeyboardEvent::KEY_X;
    case GLFW_KEY_Y:
        return base::KeyboardEvent::KEY_Y;
    case GLFW_KEY_Z:
        return base::KeyboardEvent::KEY_Z;
    case GLFW_KEY_LEFT_BRACKET:
        return base::KeyboardEvent::KEY_LEFT_BRACKET;
    case GLFW_KEY_RIGHT_BRACKET:
        return base::KeyboardEvent::KEY_RIGHT_BRACKET;
    case GLFW_KEY_BACKSLASH:
        return base::KeyboardEvent::KEY_BACKSLASH;
    case GLFW_KEY_GRAVE_ACCENT:
        return base::KeyboardEvent::KEY_GRAVE_ACCENT;
    case GLFW_KEY_ESCAPE:
        return base::KeyboardEvent::KEY_ESCAPE;
    case GLFW_KEY_ENTER:
        return base::KeyboardEvent::KEY_ENTER;
    case GLFW_KEY_TAB:
        return base::KeyboardEvent::KEY_TAB;
    case GLFW_KEY_BACKSPACE:
        return base::KeyboardEvent::KEY_BACKSPACE;
    case GLFW_KEY_INSERT:
        return base::KeyboardEvent::KEY_INSERT;
    case GLFW_KEY_DELETE:
        return base::KeyboardEvent::KEY_DELETE;
    case GLFW_KEY_LEFT:
        return base::KeyboardEvent::KEY_LEFT;
    case GLFW_KEY_RIGHT:
        return base::KeyboardEvent::KEY_RIGHT;
    case GLFW_KEY_UP:
        return base::KeyboardEvent::KEY_UP;
    case GLFW_KEY_DOWN:
        return base::KeyboardEvent::KEY_DOWN;
    case GLFW_KEY_PAGE_UP:
        return base::KeyboardEvent::KEY_PAGE_UP;
    case GLFW_KEY_PAGE_DOWN:
        return base::KeyboardEvent::KEY_PAGE_DOWN;
    case GLFW_KEY_HOME:
        return base::KeyboardEvent::KEY_HOME;
    case GLFW_KEY_END:
        return base::KeyboardEvent::KEY_END;
    case GLFW_KEY_CAPS_LOCK:
        return base::KeyboardEvent::KEY_CAPS_LOCK;
    case GLFW_KEY_SCROLL_LOCK:
        return base::KeyboardEvent::KEY_SCROLL_LOCK;
    case GLFW_KEY_NUM_LOCK:
        return base::KeyboardEvent::KEY_NUM_LOCK;
    case GLFW_KEY_PRINT_SCREEN:
        return base::KeyboardEvent::KEY_PRINT_SCREEN;
    case GLFW_KEY_F1:
        return base::KeyboardEvent::KEY_F1;
    case GLFW_KEY_F2:
        return base::KeyboardEvent::KEY_F2;
    case GLFW_KEY_F3:
        return base::KeyboardEvent::KEY_F3;
    case GLFW_KEY_F4:
        return base::KeyboardEvent::KEY_F4;
    case GLFW_KEY_F5:
        return base::KeyboardEvent::KEY_F5;
    case GLFW_KEY_F6:
        return base::KeyboardEvent::KEY_F6;
    case GLFW_KEY_F7:
        return base::KeyboardEvent::KEY_F7;
    case GLFW_KEY_F8:
        return base::KeyboardEvent::KEY_F8;
    case GLFW_KEY_F9:
        return base::KeyboardEvent::KEY_F9;
    case GLFW_KEY_F10:
        return base::KeyboardEvent::KEY_F10;
    case GLFW_KEY_F11:
        return base::KeyboardEvent::KEY_F11;
    case GLFW_KEY_F12:
        return base::KeyboardEvent::KEY_F12;
    case GLFW_KEY_LEFT_SHIFT:
        return base::KeyboardEvent::KEY_LEFT_SHIFT;
    case GLFW_KEY_LEFT_CONTROL:
        return base::KeyboardEvent::KEY_LEFT_CTRL;
    case GLFW_KEY_LEFT_ALT:
        return base::KeyboardEvent::KEY_LEFT_ALT;
    case GLFW_KEY_RIGHT_SHIFT:
        return base::KeyboardEvent::KEY_RIGHT_SHIFT;
    case GLFW_KEY_RIGHT_CONTROL:
        return base::KeyboardEvent::KEY_RIGHT_CTRL;
    case GLFW_KEY_RIGHT_ALT:
        return base::KeyboardEvent::KEY_RIGHT_ALT;
    default:
        break;
    }

    return base::KeyboardEvent::UNDEFINED;
}

} }
